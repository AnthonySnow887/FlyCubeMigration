#!/usr/bin/env python3 

import os

# Check is root user
if os.geteuid() == 0:
    print("[FlyCubeMigration] root user not supported! Abort!")
    exit(1)

import re
import requests
from datetime import datetime
from src.Config.Config import Config
from src.Logger.ConsoleLogger import ConsoleLogger
from src.Helper.Helper import Helper
from src.ConsoleHelper.ConsoleHelper import ConsoleHelper
from src.Database.DatabaseFactory import DatabaseFactory
from src.Migration.MigrationCore import MigrationCore
from src.Settings.Settings import Settings
from src.PostScripts.PostScripts import PostScripts
from src.TemplateCompiler.TemplateCompiler import TemplateCompiler

version = "1.1.0"
url_fly_cube_migration_latest = "https://api.github.com/repos/AnthonySnow887/FlyCubeMigration/releases/latest"


def init_core():
    # Create config
    Config.instance().load_config(settings_dir())

    # Create and load database factory
    DatabaseFactory.instance().load_config(configs_dir())

    # Create and load post-scripts
    PostScripts.instance().load_config(configs_dir())

    # Create and load migration core
    MigrationCore.instance().load_migrations(db_migrations_dir())


def settings_dir() -> str:
    # Get settings
    s = Settings('FlyCubeMigration')
    return s.value('config-dir', '')


def configs_dir() -> str:
    tmp_dir = Config.instance().arg(Config.TAG_CONFIG_DIR, '')
    return Helper.splice_symbol_last(tmp_dir, '/')


def db_migrations_dir() -> str:
    tmp_dir = Config.instance().arg(Config.TAG_DB_MIGRATIONS_DIR, '')
    return Helper.splice_symbol_last(tmp_dir, '/')


def set_config_dir(cmd, value):
    # Save old '--env'
    env = Config.instance().arg(Config.instance().env_key(), '')
    # Re-Load config
    Config.instance().reset_config()
    Config.instance().load_config(value)
    # Set old '--env'
    Config.instance().set_arg(Config.instance().env_key(), env)
    # Re-Load database factory
    DatabaseFactory.instance().reset_config()
    DatabaseFactory.instance().load_config(configs_dir())
    # Re-Load migration core
    MigrationCore.instance().reset_migrations()
    MigrationCore.instance().load_migrations(db_migrations_dir())
    # Re-Load post-scripts factory
    PostScripts.instance().reset_config()
    PostScripts.instance().load_config(configs_dir())


def save_config_dir():
    # Get config dir
    conf_dir_value = str(ConsoleHelper.application_argv_value('--config-dir', ''))
    if conf_dir_value == '':
        return
    # Save settings
    s = Settings('FlyCubeMigration')
    s.set_value('config-dir', conf_dir_value)
    s.save_settings()
    print("[FlyCubeMigration] Save settings success")


def clear_config_dir():
    # Save settings
    s = Settings('FlyCubeMigration')
    s.remove_key('config-dir')
    s.save_settings()
    print("[FlyCubeMigration] Clear settings success")


def show_settings():
    # init core
    init_core()
    # run command
    print("=== FlyCubeMigration =========================")
    print("")
    print(f"Config file: {Config.instance().config_file_path()}")
    print("Values:")
    c_args = Config.instance().args()
    for k, v in c_args.items():
        print(f" - {k}: {v}")
    print("")
    print("=== FlyCubeMigration =========================")


def show_post_scripts():
    # init core
    init_core()
    # run command
    print("=== FlyCubeMigration =========================")
    print("")
    print(f"Loaded post-scripts:")
    post_scripts = PostScripts.instance().post_scripts()
    for f in post_scripts:
        print(f" - {f}")
    print("")
    print("=== FlyCubeMigration =========================")


def show_version():
    print(f"[FlyCubeMigration] Core version: {version}")


def select_latest_version() -> str:
    r = requests.get(url_fly_cube_migration_latest)
    json_data = r.json()
    if len(json_data.keys()) == 0:
        return "?.?.?"
    tag_name = json_data.get('tag_name', '?.?.?')
    result = re.search('^v(\d.\d.\d)$', tag_name)
    if not result:
        return "?.?.?"
    return result.group(1)


def show_latest_version():
    print(f"[FlyCubeMigration] Latest Core version: {select_latest_version()}")


def set_env(cmd, value):
    # init core
    init_core()
    # run command
    Config.instance().set_arg(Config.instance().env_key(), value)
    # reload database factory config
    DatabaseFactory.instance().reset_config()
    DatabaseFactory.instance().load_config(configs_dir())


def set_show_output(cmd, value):
    tmp_value = (str(value).strip().lower() == 'true')
    ConsoleLogger.instance().set_show_out(tmp_value)


def create_new_project(cmd, value):
    # run command
    m_name = Helper.to_camelcase(str(ConsoleHelper.application_argv_value('--name', '')))
    if m_name == '':
        print("Name is Empty!")
        return
    now = datetime.now()
    now.strftime("%d/%m/%Y %H:%M:%S")
    # check project def dir
    m_dir = f"/home/{Helper.current_user()}/FlyCubeMigrationProjects"
    if not os.path.exists(m_dir):
        os.mkdir(m_dir)

    # check project dir
    m_dir = f"/home/{Helper.current_user()}/FlyCubeMigrationProjects/{m_name.capitalize()}"
    if os.path.exists(m_dir):
        print("Project directory already exist!")
        return
    # create project files
    print("=== FlyCubeMigration =========================")
    os.mkdir(m_dir)
    print(f"[Created] {m_dir}")

    os.mkdir(f"{m_dir}/config")
    print(f"[Created] {m_dir}/config")

    os.mkdir(f"{m_dir}/db")
    print(f"[Created] {m_dir}/db")

    os.mkdir(f"{m_dir}/db/migrate")
    print(f"[Created] {m_dir}/db/migrate")

    os.mkdir(f"{m_dir}/post_scripts")
    print(f"[Created] {m_dir}/post_scripts")

    tc = TemplateCompiler()
    tc.append_help_param('CURRENT_USER', Helper.current_user())
    tc.append_help_param('CURRENT_DATE', now.strftime("%d.%m.%Y"))
    tc.append_help_param('CURRENT_TIME', now.strftime("%H:%M"))
    tc.append_help_param('PROJECT_PATH', m_dir)

    # - 1 -
    m_data = tc.compile(Helper.read_file(os.path.dirname(os.path.realpath(__file__)) + "/templates/fly-cube-migration.yml.tmpl"))
    with open(f"{m_dir}/config/fly-cube-migration.yml", 'w') as f:
        f.write(m_data)
        print(f"[Created] {m_dir}/config/fly-cube-migration.yml")
    # - 2 -
    m_data = tc.compile(Helper.read_file(os.path.dirname(os.path.realpath(__file__)) + "/templates/database.yml.tmpl"))
    with open(f"{m_dir}/config/database.yml", 'w') as f:
        f.write(m_data)
        print(f"[Created] {m_dir}/config/database.yml")
    # - 3 -
    m_data = tc.compile(Helper.read_file(os.path.dirname(os.path.realpath(__file__)) + "/templates/post-scripts.yml.tmpl"))
    with open(f"{m_dir}/config/post-scripts.yml", 'w') as f:
        f.write(m_data)
        print(f"[Created] {m_dir}/config/post-scripts.yml")

    print("=== FlyCubeMigration =========================")


def create_migration(cmd, value):
    # init core
    init_core()
    # run command
    m_name = Helper.to_camelcase(str(ConsoleHelper.application_argv_value('--name', '')))
    if m_name == '':
        print("Name is Empty!")
        return

    now = datetime.now()
    now.strftime("%d/%m/%Y %H:%M:%S")
    cut_time = now.strftime("%Y%m%d%H%M%S")
    # check migrate dir
    m_dir = db_migrations_dir()
    if not os.path.exists(m_dir):
        os.mkdir(m_dir)
    # create migration
    m_path = f"{m_dir}/{cut_time}_{m_name}.py"
    print("=== FlyCubeMigration: Create new migration ===")
    tc = TemplateCompiler()
    tc.append_help_param('CURRENT_USER', Helper.current_user())
    tc.append_help_param('CURRENT_DATE', now.strftime("%d.%m.%Y"))
    tc.append_help_param('CURRENT_TIME', now.strftime("%H:%M"))
    tc.append_help_param('MIGRATION_NAME', m_name)
    m_data = tc.compile(Helper.read_file(os.path.dirname(os.path.realpath(__file__)) + "/templates/migration.py.tmpl"))
    with open(m_path, 'w') as f:
        f.write(m_data)

    print(f"[Created] {m_path}")
    print("=== FlyCubeMigration =========================")


def make_migration_number(cmd, value):
    now = datetime.now()
    now.strftime("%d/%m/%Y %H:%M:%S")
    cut_time = now.strftime("%Y%m%d%H%M%S")
    print("=== FlyCubeMigration: Make migration number ===")
    print(f"{cut_time}")
    print("=== FlyCubeMigration ==========================")


def db_version(cmd, value):
    # init core
    init_core()
    # run command
    db_names = []
    result = re.search('^--db-version-(.*)$', cmd)
    if not result:
        s_db = DatabaseFactory.instance().secondary_databases()
        db_names = [''] + s_db
    else:
        db_name = result.group(1)
        if db_name == 'primary':
            db_name = ''
        db_names = [db_name]

    m_version = MigrationCore.instance().current_version(db_names)
    print("=== FlyCubeMigration: Database version ===\r\n")
    print(f"Env type: {Config.instance().env_mode_str()}")
    print(f"Database version: {m_version}\r\n")
    print("=== FlyCubeMigration =====================\r\n")


def db_migrate_status(cmd, value):
    # init core
    init_core()
    # run command
    db_names = []
    result = re.search('^--db-migrate-status-(.*)$', cmd)
    if not result:
        s_db = DatabaseFactory.instance().secondary_databases()
        db_names = [''] + s_db
    else:
        db_name = result.group(1)
        if db_name == 'primary':
            db_name = ''
        db_names = [db_name]

    print("=== FlyCubeMigration: Migrate status ===\r\n")
    print(f"Env type: {Config.instance().env_mode_str()}")
    MigrationCore.instance().migrate_status(db_names)
    print("")
    print("=== FlyCubeMigration =====================\r\n")


def db_migrate(cmd, value):
    # init core
    init_core()
    # run command
    db_names = []
    result = re.search('^--db-migrate-(.*)$', cmd)
    if not result:
        s_db = DatabaseFactory.instance().secondary_databases()
        db_names = [''] + s_db
    else:
        db_name = result.group(1)
        if db_name == 'primary':
            db_name = ''
        db_names = [db_name]

    print("=== FlyCubeMigration: Migrate database ===\r\n")
    print(f"Env type: {Config.instance().env_mode_str()}")
    m_version = int(ConsoleHelper.application_argv_value('--to-version', -1))
    MigrationCore.instance().migrate(db_names, m_version)
    print("")
    print("=== FlyCubeMigration =====================\r\n")


def db_migrate_redo(cmd, value):
    # init core
    init_core()
    # run command
    db_names = []
    result = re.search('^--db-migrate-redo-(.*)$', cmd)
    if not result:
        s_db = DatabaseFactory.instance().secondary_databases()
        db_names = [''] + s_db
    else:
        db_name = result.group(1)
        if db_name == 'primary':
            db_name = ''
        db_names = [db_name]

    print("=== FlyCubeMigration: Re-Install database migration ===\r\n")
    print(f"Env type: {Config.instance().env_mode_str()}")
    step = int(ConsoleHelper.application_argv_value('--step', 1))
    MigrationCore.instance().migrate_redo(db_names, step)
    print("")
    print("=== FlyCubeMigration =====================\r\n")


def db_rollback(cmd, value):
    # init core
    init_core()
    # run command
    db_names = []
    result = re.search('^--db-rollback-(.*)$', cmd)
    if not result:
        s_db = DatabaseFactory.instance().secondary_databases()
        db_names = [''] + s_db
    else:
        db_name = result.group(1)
        if db_name == 'primary':
            db_name = ''
        db_names = [db_name]

    print("=== FlyCubeMigration: Rollback database ===\r\n")
    print(f"Env type: {Config.instance().env_mode_str()}")
    step = int(ConsoleHelper.application_argv_value('--step', 1))
    MigrationCore.instance().rollback(db_names, step)
    print("")
    print("=== FlyCubeMigration =====================\r\n")


def db_rollback_all(cmd, value):
    # init core
    init_core()
    # run command
    s_db = DatabaseFactory.instance().secondary_databases()
    db_names = [''] + s_db

    print("=== FlyCubeMigration: Rollback database ===\r\n")
    print(f"Env type: {Config.instance().env_mode_str()}")
    MigrationCore.instance().rollback(db_names, -1)
    print("")
    print("=== FlyCubeMigration =====================\r\n")


def db_create(cmd, value):
    # init core
    init_core()
    # run command
    s_db = DatabaseFactory.instance().secondary_databases()
    db_name = ''
    result = re.search('^--db-create-(.*)$', cmd)
    if result:
        db_name = result.group(1)

    print("=== FlyCubeMigration: Create database ===\r\n")
    print(f"Env type: {Config.instance().env_mode_str()}")

    if db_name == '':
        # create primary
        MigrationCore.instance().db_create(db_name)
        # create secondary
        for d in s_db:
            MigrationCore.instance().db_create(d)
    else:
        if db_name == 'primary':
            db_name = ''
        # create database by name
        MigrationCore.instance().db_create(db_name)

    print("")
    print("=== FlyCubeMigration ====================\r\n")


def db_create_all(cmd, value):
    # init core
    init_core()
    # run command
    print("=== FlyCubeMigration: Create all databases ===\r\n")
    print(f"Env type: {Config.instance().env_mode_str()}")
    #
    # create for development
    #
    Config.instance().set_arg(Config.instance().env_key(), 'development')
    DatabaseFactory.instance().reset_config()
    DatabaseFactory.instance().load_config(configs_dir())
    s_db = DatabaseFactory.instance().secondary_databases()

    # create primary
    MigrationCore.instance().db_create('')
    # create secondary
    for d in s_db:
        MigrationCore.instance().db_create(d)

    #
    # create for production
    #
    Config.instance().set_arg(Config.instance().env_key(), 'production')
    DatabaseFactory.instance().reset_config()
    DatabaseFactory.instance().load_config(configs_dir())
    s_db = DatabaseFactory.instance().secondary_databases()

    # create primary
    MigrationCore.instance().db_create('')
    # create secondary
    for d in s_db:
        MigrationCore.instance().db_create(d)

    print("")
    print("=== FlyCubeMigration ====================\r\n")


def db_drop(cmd, value):
    # init core
    init_core()
    # run command
    s_db = DatabaseFactory.instance().secondary_databases()
    db_name = ''
    result = re.search('^--db-drop-(.*)$', cmd)
    if result:
        db_name = result.group(1)

    print("=== FlyCubeMigration: Drop database ===\r\n")
    print(f"Env type: {Config.instance().env_mode_str()}")

    if db_name == '':
        # create primary
        MigrationCore.instance().db_drop(db_name)
        # create secondary
        for d in s_db:
            MigrationCore.instance().db_drop(d)
    else:
        if db_name == 'primary':
            db_name = ''
        # create database by name
        MigrationCore.instance().db_drop(db_name)

    print("")
    print("=== FlyCubeMigration ====================\r\n")


def db_drop_all(cmd, value):
    # init core
    init_core()
    # run command
    print("=== FlyCubeMigration: Drop all databases ===\r\n")
    print(f"Env type: {Config.instance().env_mode_str()}")
    #
    # create for development
    #
    Config.instance().set_arg(Config.instance().env_key(), 'development')
    DatabaseFactory.instance().reset_config()
    DatabaseFactory.instance().load_config(configs_dir())
    s_db = DatabaseFactory.instance().secondary_databases()

    # create primary
    MigrationCore.instance().db_drop('')
    # create secondary
    for d in s_db:
        MigrationCore.instance().db_drop(d)

    #
    # create for production
    #
    Config.instance().set_arg(Config.instance().env_key(), 'production')
    DatabaseFactory.instance().reset_config()
    DatabaseFactory.instance().load_config(configs_dir())
    s_db = DatabaseFactory.instance().secondary_databases()

    # create primary
    MigrationCore.instance().db_drop('')
    # create secondary
    for d in s_db:
        MigrationCore.instance().db_drop(d)

    print("")
    print("=== FlyCubeMigration ====================\r\n")


def main():
    # Create console logger
    ConsoleLogger.instance()

    # Init console helper

    # --version
    ConsoleHelper.instance().append_helper(show_version, {
        'command': '--version',
        'description': 'Print the version',
        'alternatives': ['-v'],
        'primary': True
    })
    # --latest-version
    ConsoleHelper.instance().append_helper(show_latest_version, {
        'command': '--latest-version',
        'description': 'Select latest version from GitHub',
        'alternatives': ['-lv'],
        'primary': True
    })
    # --env=[VALUE]
    ConsoleHelper.instance().append_helper(set_env, {
        'command': '--env',
        'param': '[VALUE]',
        'description': 'Set current environment (production/development; default: development)',
        'primary': True,
        'has_exit': False
    })
    # --output=[VALUE]
    ConsoleHelper.instance().append_helper(set_show_output, {
        'command': '--output',
        'param': '[VALUE]',
        'description': 'Show sql output (optional) (default: false)',
        'primary': True,
        'has_exit': False
    })
    # --config-dir=[VALUE]
    ConsoleHelper.instance().append_helper(set_config_dir, {
        'command': '--config-dir',
        'param': '[VALUE]',
        'description': 'Set FlyCubeMigration config file directory (optional) (default: \'config/\')',
        'primary': True,
        'has_exit': False
    })
    # --save-config-dir
    ConsoleHelper.instance().append_helper(save_config_dir, {
        'command': '--save-config-dir',
        'description': 'Save in settings FlyCubeMigration config file directory',
        'primary': True
    })
    # --clear-config-dir
    ConsoleHelper.instance().append_helper(clear_config_dir, {
        'command': '--clear-config-dir',
        'description': 'Clear from settings FlyCubeMigration config file directory',
        'primary': True
    })
    # --settings
    ConsoleHelper.instance().append_helper(show_settings, {
        'command': '--settings',
        'description': 'Show current FlyCubeMigration config settings',
        'primary': True
    })
    # --post-scripts
    ConsoleHelper.instance().append_helper(show_post_scripts, {
        'command': '--post-scripts',
        'description': 'Show loaded post-scripts',
        'has_exit': True
    })

    # --new-project
    ConsoleHelper.instance().append_helper(create_new_project, {
        'command': '--new-project',
        'description': 'Create new FlyCubeMigration project',
        'group': '--new-project'
    })

    # --new-migration
    ConsoleHelper.instance().append_helper(create_migration, {
        'command': '--new-migration',
        'description': 'Create new migration',
        'group': '--new-migration'
    })

    # --make-migration-number
    ConsoleHelper.instance().append_helper(make_migration_number, {
        'command': '--make-migration-number',
        'description': 'Create and output new migration version number',
        'group': '--make-migration-number'
    })

    #
    # --db-create... commands:
    #
    # --db-create
    ConsoleHelper.instance().append_helper(db_create, {
        'command': '--db-create',
        'description': 'Create all databases for current environment',
        'group': '--db-create'
    })
    if DatabaseFactory.instance().has_secondary_databases():
        # --db-create-primary
        ConsoleHelper.instance().append_helper(db_create, {
            'command': '--db-create-primary',
            'description': 'Create primary database for current environment',
            'group': '--db-create'
        })

        for d in DatabaseFactory.instance().secondary_databases():
            # --db-create-[database name]
            ConsoleHelper.instance().append_helper(db_create, {
                'command': f"--db-create-{d}",
                'description': f"Create database '{d}' for current environment",
                'group': '--db-create'
            })
    # --db-create-all
    ConsoleHelper.instance().append_helper(db_create_all, {
        'command': '--db-create-all',
        'description': 'Create all databases for all environments (development and production)',
        'group': '--db-create'
    })

    #
    # --db-drop... commands:
    #
    # --db-drop
    ConsoleHelper.instance().append_helper(db_drop, {
        'command': '--db-drop',
        'description': 'Drop all databases for current environment',
        'group': '--db-drop'
    })
    if DatabaseFactory.instance().has_secondary_databases():
        # --db-drop-primary
        ConsoleHelper.instance().append_helper(db_drop, {
            'command': '--db-drop-primary',
            'description': 'Drop primary database for current environment',
            'group': '--db-drop'
        })

        for d in DatabaseFactory.instance().secondary_databases():
            # --db-drop-[database name]
            ConsoleHelper.instance().append_helper(db_drop, {
                'command': f"--db-drop-{d}",
                'description': f"Drop database '{d}' for current environment",
                'group': '--db-drop'
            })
    # --db-drop-all
    ConsoleHelper.instance().append_helper(db_drop_all, {
        'command': '--db-drop-all',
        'description': 'Drop all databases for all environments (development and production)',
        'group': '--db-drop'
    })

    # NOTE: Disabled in this version
    # #
    # # --db-setup... commands:
    # #
    # # --db-setup
    # ConsoleHelper.instance().append_helper(None, {
    #     'command': '--db-setup',
    #     'description': 'Init all databases for current environment',
    #     'group': '--db-setup'
    # })
    # if DatabaseFactory.instance().has_secondary_databases():
    #     # --db-setup-primary
    #     ConsoleHelper.instance().append_helper(None, {
    #         'command': '--db-setup-primary',
    #         'description': 'Init primary database for current environment',
    #         'group': '--db-setup'
    #     })
    #
    #     for d in DatabaseFactory.instance().secondary_databases():
    #         # --db-setup-[database name]
    #         ConsoleHelper.instance().append_helper(None, {
    #             'command': f"--db-setup-{d}",
    #             'description': f"Init database '{d}' for current environment",
    #             'group': '--db-setup'
    #         })
    #
    # #
    # # --db-reset... commands:
    # #
    # # --db-reset
    # ConsoleHelper.instance().append_helper(None, {
    #     'command': '--db-reset',
    #     'description': 'Re-Init all databases for current environment',
    #     'group': '--db-reset'
    # })
    # if DatabaseFactory.instance().has_secondary_databases():
    #     # --db-reset-primary
    #     ConsoleHelper.instance().append_helper(None, {
    #         'command': '--db-reset-primary',
    #         'description': 'Re-Init primary database for current environment',
    #         'group': '--db-reset'
    #     })
    #
    #     for d in DatabaseFactory.instance().secondary_databases():
    #         # --db-reset-[database name]
    #         ConsoleHelper.instance().append_helper(None, {
    #             'command': f"--db-reset-{d}",
    #             'description': f"Re-Init database '{d}' for current environment",
    #             'group': '--db-reset'
    #         })
    #
    # # --db-seed
    # ConsoleHelper.instance().append_helper(None, {
    #     'command': '--db-seed',
    #     'description': 'Load database Seed.py file',
    #     'group': '--db-seed'
    # })

    #
    # --db-migrate... commands:
    #
    # --db-migrate
    ConsoleHelper.instance().append_helper(db_migrate, {
        'command': '--db-migrate',
        'description': 'Start all database(s) migrations',
        'group': '--db-migrate'
    })
    if DatabaseFactory.instance().has_secondary_databases():
        # --db-migrate-primary
        ConsoleHelper.instance().append_helper(db_migrate, {
            'command': '--db-migrate-primary',
            'description': 'Start primary database migrations',
            'group': '--db-migrate'
        })

        for d in DatabaseFactory.instance().secondary_databases():
            # --db-migrate-[database name]
            ConsoleHelper.instance().append_helper(db_migrate, {
                'command': f"--db-migrate-{d}",
                'description': f"Start database '{d}' migrations",
                'group': '--db-migrate'
            })

    #
    # --db-migrate-redo... commands:
    #
    # --db-migrate-redo
    ConsoleHelper.instance().append_helper(db_migrate_redo, {
        'command': '--db-migrate-redo',
        'description': 'Start re-install last database migration',
        'group': '--db-migrate-redo'
    })
    if DatabaseFactory.instance().has_secondary_databases():
        # --db-migrate-redo-primary
        ConsoleHelper.instance().append_helper(db_migrate_redo, {
            'command': '--db-migrate-redo-primary',
            'description': 'Start re-install last primary database migration',
            'group': '--db-migrate-redo'
        })

        for d in DatabaseFactory.instance().secondary_databases():
            # --db-migrate-redo-[database name]
            ConsoleHelper.instance().append_helper(db_migrate_redo, {
                'command': f"--db-migrate-redo-{d}",
                'description': f"Start re-install last database '{d}' migration",
                'group': '--db-migrate-redo'
            })

    #
    # --db-migrate-status... commands:
    #
    # --db-migrate-status
    ConsoleHelper.instance().append_helper(db_migrate_status, {
        'command': '--db-migrate-status',
        'description': 'Select migrations status',
        'group': '--db-migrate-status'
    })
    if DatabaseFactory.instance().has_secondary_databases():
        # --db-migrate-status-primary
        ConsoleHelper.instance().append_helper(db_migrate_status, {
            'command': '--db-migrate-status-primary',
            'description': 'Select migrations status for primary database',
            'group': '--db-migrate-status'
        })

        for d in DatabaseFactory.instance().secondary_databases():
            # --db-migrate-status-[database name]
            ConsoleHelper.instance().append_helper(db_migrate_status, {
                'command': f"--db-migrate-status-{d}",
                'description': f"Select migrations status for database '{d}'",
                'group': '--db-migrate-status'
            })

    #
    # --db-rollback... commands:
    #
    # --db-rollback
    ConsoleHelper.instance().append_helper(db_rollback, {
        'command': '--db-rollback',
        'description': 'Start uninstall last database migration',
        'group': '--db-rollback'
    })
    if DatabaseFactory.instance().has_secondary_databases():
        # --db-rollback-primary
        ConsoleHelper.instance().append_helper(db_rollback, {
            'command': '--db-rollback-primary',
            'description': 'Start uninstall last primary database migration',
            'group': '--db-rollback'
        })

        for d in DatabaseFactory.instance().secondary_databases():
            # --db-rollback-[database name]
            ConsoleHelper.instance().append_helper(db_rollback, {
                'command': f"--db-rollback-{d}",
                'description': f"Start uninstall last database '{d}' migration",
                'group': '--db-rollback'
            })
    # --db-rollback-all
    ConsoleHelper.instance().append_helper(db_rollback_all, {
        'command': '--db-rollback-all',
        'description': 'Start uninstall all database(s) migrations',
        'group': '--db-rollback'
    })

    #
    # --db-version... commands:
    #
    # --db-version
    ConsoleHelper.instance().append_helper(db_version, {
        'command': '--db-version',
        'description': 'Select database(s) migration version',
        'group': '--db-version'
    })
    if DatabaseFactory.instance().has_secondary_databases():
        # --db-version-primary
        ConsoleHelper.instance().append_helper(db_version, {
            'command': '--db-version-primary',
            'description': 'Select migration version for primary database',
            'group': '--db-version'
        })

        for d in DatabaseFactory.instance().secondary_databases():
            # --db-version-[database name]
            ConsoleHelper.instance().append_helper(db_version, {
                'command': f"--db-version-{d}",
                'description': f"Select migration version for database '{d}'",
                'group': '--db-version'
            })

    # NOTE: Disabled in this version
    # #
    # # --db-schema-dump... commands:
    # #
    # # --db-schema-dump
    # ConsoleHelper.instance().append_helper(None, {
    #     'command': '--db-schema-dump',
    #     'description': 'Create all databases schema dump for current environment',
    #     'group': '--db-schema-dump'
    # })
    # if DatabaseFactory.instance().has_secondary_databases():
    #     # --db-schema-dump-primary
    #     ConsoleHelper.instance().append_helper(None, {
    #         'command': '--db-schema-dump-primary',
    #         'description': 'Create primary database schema dump for current environment',
    #         'group': '--db-schema-dump'
    #     })
    #
    #     for d in DatabaseFactory.instance().secondary_databases():
    #         # --db-schema-dump-[database name]
    #         ConsoleHelper.instance().append_helper(None, {
    #             'command': f"--db-schema-dump-{d}",
    #             'description': f"Create database '{d}' schema dump",
    #             'group': '--db-schema-dump'
    #         })
    #
    # #
    # # --db-schema-load... commands:
    # #
    # # --db-schema-load
    # ConsoleHelper.instance().append_helper(None, {
    #     'command': '--db-schema-load',
    #     'description': 'Re-Create all databases and load their schema dumps',
    #     'group': '--db-schema-load'
    # })
    # if DatabaseFactory.instance().has_secondary_databases():
    #     # --db-schema-load-primary
    #     ConsoleHelper.instance().append_helper(None, {
    #         'command': '--db-schema-load-primary',
    #         'description': 'Re-Create primary database and load schema dump',
    #         'group': '--db-schema-load'
    #     })
    #
    #     for d in DatabaseFactory.instance().secondary_databases():
    #         # --db-schema-load-[database name]
    #         ConsoleHelper.instance().append_helper(None, {
    #             'command': f"--db-schema-load-{d}",
    #             'description': f"Re-Create database '{d}' and load schema dump",
    #             'group': '--db-schema-load'
    #         })

    # --name=[VALUE]
    ConsoleHelper.instance().append_helper(None, {
        'command': '--name',
        'param': '[VALUE]',
        'description': 'Set new object name',
        'group': 'other'
    })

    # --to-version=[VALUE]
    ConsoleHelper.instance().append_helper(None, {
        'command': '--to-version',
        'param': '[VALUE]',
        'description': 'Set needed migration version (optional; if 0 - uninstall all migrations)',
        'group': 'other'
    })

    # --step=[VALUE]
    ConsoleHelper.instance().append_helper(None, {
        'command': '--step',
        'param': '[VALUE]',
        'description': 'Set needed number of steps for uninstall (re-install) migrations (optional; default: 1)',
        'group': 'other'
    })

    # append examples:
    ConsoleHelper.instance().append_example('Set FlyCubeMigration config directory (\'--config-dir\' is grouped with all the commands listed below)',
                                            f"{ConsoleHelper.application_file()} --config-dir=../test/config/ [Other Commands]")
    ConsoleHelper.instance().append_example('Set current environment (\'--env\' is grouped with all the commands listed below)',
                                            f"{ConsoleHelper.application_file()} --env=production [Other Commands]")
    ConsoleHelper.instance().append_example('Show sql output (\'--output\' is grouped with all the commands listed below)',
                                            f"{ConsoleHelper.application_file()} --output=true [Other Commands]")
    ConsoleHelper.instance().append_example('Create new FlyCubeMigration project',
                                            f"{ConsoleHelper.application_file()} --new-project --name=ExampleProject")
    ConsoleHelper.instance().append_example('Create new migration',
                                            f"{ConsoleHelper.application_file()} --new-migration --name=ExampleMigration")
    ConsoleHelper.instance().append_example('Select database migration version',
                                            f"{ConsoleHelper.application_file()} --db-version")
    ConsoleHelper.instance().append_example('Select database migrations status',
                                            f"{ConsoleHelper.application_file()} --db-migrate-status")
    ConsoleHelper.instance().append_example('Install all migrations',
                                            f"{ConsoleHelper.application_file()} --db-migrate")
    ConsoleHelper.instance().append_example('Install needed migrations',
                                            f"{ConsoleHelper.application_file()} --db-migrate --to-version=20210309092620")
    ConsoleHelper.instance().append_example('Uninstall last migration',
                                            f"{ConsoleHelper.application_file()} --db-rollback")
    ConsoleHelper.instance().append_example('Uninstall last N-steps migrations',
                                            f"{ConsoleHelper.application_file()} --db-rollback --step=3")
    ConsoleHelper.instance().append_example('Uninstall all migrations (ver. 1)',
                                            f"{ConsoleHelper.application_file()} --db-rollback-all")
    ConsoleHelper.instance().append_example('Uninstall all migrations (ver. 2)',
                                            f"{ConsoleHelper.application_file()} --db-migrate --to-version=0")
    ConsoleHelper.instance().append_example('Re-Install last migration',
                                            f"{ConsoleHelper.application_file()} --db-migrate-redo")
    ConsoleHelper.instance().append_example('Re-Install last N-steps migrations',
                                            f"{ConsoleHelper.application_file()} --db-migrate-redo --step=3")

    # process console command
    ConsoleHelper.instance().process_command()


if __name__ == "__main__":
    main()
